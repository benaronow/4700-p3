#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    relations = {}
    sockets = {}
    ports = {}
    
    neighbors = []
    forwarding_table = []
    announcements = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.neighbors.append(neighbor)
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def maskNetwork(self, to_mask, mask):
        srcArr = [int(octet) for octet in to_mask.split('.')]
        maskArr = [int(octet) for octet in mask.split('.')]
        networkArr = [src & mask for src, mask in zip(srcArr, maskArr)]
        return '.'.join(map(str, networkArr))

    #def handleHandshake(msg_json, fowarding_table):
        #self.fowarding_table[msg_json['src']] = msg_json['dst']

    def handleUpdate(self, msg, msg_json):
        update_from = msg_json['src']
        network = msg_json['msg']['network']
        netmask = msg_json['msg']['netmask']
        ASPath = [args.asn, msg_json['msg']['ASPath'][0]]

        self.announcements.append(msg)
        self.forwarding_table.append({
            'network': network,
            'netmask': netmask,
            'peer': update_from,
            'localpref': msg_json['msg']['localpref'],
            'selfOrigin': msg_json['msg']['selfOrigin'],
            'ASPath': msg_json['msg']['ASPath'],
            'origin': msg_json['msg']['origin']
        })

        for neighbor in self.neighbors:
            if neighbor != update_from:
                self.send(neighbor, json.dumps({ 'type': 'update', 'src': self.our_addr(neighbor), 'dst': neighbor,
                "msg": { 'netmask': netmask, 'ASPath': ASPath, 'network': network } }))
    
    def handleWithdraw(self):
        return self

    def handleData(self, msg_json):
        src = msg_json['src']
        dst = msg_json['dst']
        msg = msg_json['msg']

        forward_options = []
        for entry in self.forwarding_table:
            if entry['network'] == self.maskNetwork(dst, entry['netmask']):
                forward_options.append(entry['peer'])
        
        if len(forward_options) == 0:
            self.send(src, json.dumps({ 'type': 'no route', 'src': self.our_addr(src), 'dst': src}))
        if len(forward_options) == 1:
            self.send(forward_options[0], json.dumps({ 'type': 'data', 'src': src, 'dst': dst, 'msg': msg}))

    def handleDump(self, msg_json):
        dst = msg_json['src']
        src = self.our_addr(dst)
        msg = []
        
        for entry in self.forwarding_table:
            msg.append(entry)
        
        self.send(dst, json.dumps({ 'type': 'table', 'src': src, 'dst': dst, 'msg': msg }))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                
                print("Received message '%s' from %s" % (msg, srcif))

                msg_json = json.loads(msg)
                msg_type = msg_json["type"]
                
                # if msg_type == 'handshake':
                    # self.handleHandshake(msg_json)
                if msg_type == 'update':
                    self.handleUpdate(msg, msg_json)
                if msg_type == 'withdraw':
                    self.handleWithdraw()
                if msg_type == 'data':
                    self.handleData(msg_json)
                if msg_type == 'dump':
                    self.handleDump(msg_json)
        
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
